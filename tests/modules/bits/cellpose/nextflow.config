params {
    input_image_subpath = 'c1/s5'
    outdir = './output'
    cellpose_models_dir = './output/cellpose-models'
    output_image_dir = './output/cellpose'
    cellpose_work_dir = ''
    output_image_name = 'seg.n5'
    dask_work_dir = './output/dask'
    process_blocksize = '32,32,32'
    output_blocksize = '64,64,64'
    distributed = true
    model = 'cyto'
    diameter = 10
    blocks_overlap = '4,4,4'
    cellprob_threshold = 1.0
    cellpose_eval_channels = '0,0'
    dask_config = './tests/modules/bits/cellpose/dask_config.yml'
    max_cellpose_tasks = 3
    cellpose_workers = 3
    cellpose_required_workers = 1
    cellpose_worker_cpus = 0.8
    cellpose_worker_mem_gb = 10
    cellpose_driver_cpus = 0.5
    cellpose_driver_mem_gb = 10
    min_size = 10
    iou_depth = 1
    iou_threshold = 0.5
    device = '0'
    use_gpu = true
    use_net_avg = false
    runtime_opts = ''
}

process {
    publishDir = { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" }

    ext.container = 'bioimagetools/cellpose:2.2.3-dask2023.10.1-py11'

    withName:DASK_STARTMANAGER {
        containerOptions = '-p 8787:8787 -p 8786:8786'
    }

    withName:CELLPOSE {
        ext {
            args = [
                "--process-blocksize ${params.process_blocksize}",
                "--output-blocksize ${params.output_blocksize}",
                "--max-cellpose-tasks ${params.max_cellpose_tasks}",
                "--model ${params.model}",
                "--cellprob_threshold ${params.cellprob_threshold}",
                "--diam_mean ${params.diameter}",
                "--blocks-overlaps ${params.blocks_overlap}",
                "--eval-channels ${params.cellpose_eval_channels}",
                "--min_size ${params.min_size}",
                "--device ${params.device}",
                "--iou-threshold ${params.iou_threshold}",
                "${params.use_gpu ? '--use_gpu' : ''}",
                "${params.use_net_avg ? '--net_avg' : ''}",
            ].join(' ')
        }
    }
}

docker {
    runOptions = "${params.runtime_opts}"
}